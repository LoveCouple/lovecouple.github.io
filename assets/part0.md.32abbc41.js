import{_ as s,o as a,c as n,U as l}from"./chunks/framework.5628684b.js";const o="/serein.png",p="/pack.png",e="/deploy.png",t="/load.png",r="/enable_beta.png",c="/hello.png",f=JSON.parse('{"title":"快速入门","description":"","frontmatter":{"Author":"CAIMEO"},"headers":[],"relativePath":"part0.md","filePath":"part0.md"}'),i={name:"part0.md"},y=l(`<h1 id="快速入门" tabindex="-1">快速入门 <a class="header-anchor" href="#快速入门" aria-label="Permalink to &quot;快速入门&quot;">​</a></h1><h3 id="先决条件" tabindex="-1">先决条件 <a class="header-anchor" href="#先决条件" aria-label="Permalink to &quot;先决条件&quot;">​</a></h3><ul><li>编程语言：本文面向具有一定<strong>JavaScript</strong>基础，希望快速上手Script API的读者，学习过<strong>TypeScript</strong>则更好（若没学过，你可以把<strong>TypeScript</strong>当成具有<strong>类型标记</strong>的<strong>JavaScript</strong>）。</li><li>行为包：读者最好有一定的Minecraft行为包基础知识，本文不会介绍行为包的结构。</li><li>开发环境：推荐使用 <ul><li>操作系统：<strong>Linux</strong> (安装<strong>Mcpelauncher</strong>，这也是笔者使用的环境) / <strong>Windows</strong>（安装<strong>Minecraft Windows 10</strong>）/ <strong>Android</strong> (安装 Termux 和 VIM)</li><li>游戏版本：Minecraft Bedrock <strong>1.20.10.01</strong></li><li>编辑器：<strong>Visual Studio Code</strong></li><li>包管理工具：NodeJS NPM</li><li>项目管理：<strong>Serein</strong> （下文会告诉你安装方式）</li></ul></li></ul><h2 id="安装管理工具" tabindex="-1">安装管理工具 <a class="header-anchor" href="#安装管理工具" aria-label="Permalink to &quot;安装管理工具&quot;">​</a></h2><h3 id="安装serein" tabindex="-1">安装Serein <a class="header-anchor" href="#安装serein" aria-label="Permalink to &quot;安装Serein&quot;">​</a></h3><p>​ <strong>Serein</strong> 是一个为 Minecraft Bedrock Edition Script API 开发的脚手架项目，可以帮助开发者高效、优雅地创建和管理项目。利用它可以帮助我们快速构建项目并自动部署，很方便进行测试。</p><p>​ 打开 <strong>cmd</strong> 或者 <strong>Linux Terminal</strong>， 输入以下命令来安装 serein 并初始化我们的项目：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@pureeval/serein</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span></span>
<span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sapi</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sapi</span></span>
<span class="line"><span style="color:#FFCB6B;">serein</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span></span></code></pre></div><p>​ 按照流程配置项目（注意框选部分）：<img src="`+o+`" alt=""></p><p>​ 之后在<strong>Visual Studio Code</strong>中打开 <strong>sapi</strong> 文件夹，开始编写我们的程序。</p><h3 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># behavior_packs文件夹是存放行为包信息地方</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">behavior_packs</span></span>
<span class="line"><span style="color:#FFCB6B;">│  </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">manifest.json</span></span>
<span class="line"><span style="color:#FFCB6B;">│  </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pack_icon.png</span></span>
<span class="line"><span style="color:#FFCB6B;">│  </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">└──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">scripts</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gulpfile.js</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">package.json</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">package-lock.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># scripts 文件夹存储 scripts文件</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">scripts</span></span>
<span class="line"><span style="color:#FFCB6B;">│  </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">└──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">main.ts</span></span>
<span class="line"><span style="color:#FFCB6B;">└──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tsconfig.json</span></span></code></pre></div><ul><li>serein 利用 <strong>gulp</strong> 来完成自动部署和打包功能，因此 <strong>gulpfile</strong> 是必须的（你也可以根据自己的实际需求修改）</li><li>main.ts 是脚本入口，之后它会被编译成 js 文件</li></ul><h3 id="使用serein管理项目" tabindex="-1">使用Serein管理项目 <a class="header-anchor" href="#使用serein管理项目" aria-label="Permalink to &quot;使用Serein管理项目&quot;">​</a></h3><p>​ Serein 提供了许多方便的函数供打包、测试使用。下面介绍几个常见的命令。</p><h4 id="pack" tabindex="-1">pack <a class="header-anchor" href="#pack" aria-label="Permalink to &quot;pack&quot;">​</a></h4><p>​ 自动打包项目，保存到 <code>build/</code> 目录下</p><p><img src="`+p+'" alt="pack"></p><h4 id="deploy" tabindex="-1">deploy <a class="header-anchor" href="#deploy" aria-label="Permalink to &quot;deploy&quot;">​</a></h4><p>​ 自动部署到游戏路径（Development），会根据不同平台自动处理（包括Linux/Android/Windows）</p><p><img src="'+e+`" alt="deploy"></p><h3 id="测试流程" tabindex="-1">测试流程 <a class="header-anchor" href="#测试流程" aria-label="Permalink to &quot;测试流程&quot;">​</a></h3><p>​ 先写一段简单的代码来熟悉一下 serein 的工作流。</p><p>​ 这段代码的作用是复读玩家的话，不懂里面用到的函数没关系，后文会解释：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// main.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ChatSendAfterEvent</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@minecraft/server</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> overWorld </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDimension</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">overworld</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onChat</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ChatSendAfterEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">overWorld</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">runCommandAsync</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">say </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">afterEvents</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">chatSend</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subscribe</span><span style="color:#A6ACCD;">(onChat)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>​ 接下来运行deploy自动部署行为包：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">serein deploy</span></span></code></pre></div><p>​ 接下来可以开始测试了。</p><ol><li><p>打开Minecraft，创建一个新的世界</p></li><li><p>选择创造模式</p></li><li><p>添加你的行为包</p><p><img src="`+t+'" alt="addons"></p></li><li><p>打开实验功能（<strong>Beta APIs experiment</strong>）</p><p><img src="'+r+'" alt="Beta API"></p></li><li><p>进入世界</p></li></ol><p>​ 在聊天界面发送 <code>Hi Script API</code>，不出意外的话，会看到如下输出：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[Script Engine] Hi Script API</span></span></code></pre></div><p><img src="'+c+`" alt="hello"></p><p>​ 其它测试技巧：</p><ol><li>可以在设置打开调试控制台，便于查看错误信息</li><li>执行 <code>serein watch</code>，gulp会监控代码修改，并自动部署到游戏中</li><li>可在在游戏中使用 <code>/reload</code> 命令重新加载行为包</li></ol><h2 id="gametest框架简介" tabindex="-1">Gametest框架简介 <a class="header-anchor" href="#gametest框架简介" aria-label="Permalink to &quot;Gametest框架简介&quot;">​</a></h2><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3><p>​ 事件系统，简单来说就是通过<strong>监听</strong>某个事件发生，并在发生时做出相应的动作（执行某个函数）。Script API有两种事件类型：<code>beforeEvents</code> 和 <code>afterEvents</code>，顾名思义，前者是在某行为发生之前的会触发的事件，后者则是在事件发生之后才执行的事件。在Minecraft中世界中发生的各种事件（如实体死亡、方块破坏、聊天信息等）都包含在了其中，但并不是每种事件都有 before 和 after 两种类型，有的可能只有一种。你可以通过 <code>subscribe</code> 方法来设置事件的回调函数（也就是事件被触发时要干的事情）。完整事件列表可以查阅官方文档：</p><blockquote><p><a href="https://learn.microsoft.com/en-us/minecraft/creator/scriptapi/" target="_blank" rel="noreferrer">https://learn.microsoft.com/en-us/minecraft/creator/scriptapi/</a></p></blockquote><p>​ 举个例子，我们可以监听 <code>afterEvents</code> 的 <code>chatSend</code>， 这个事件会在玩家发送聊天信息后调用。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ChatSendAfterEvent</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@minecraft/server</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Kill lampese</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onChat</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ChatSendAfterEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sender</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lampese</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sender</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">kill</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">afterEvents</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">chatSend</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subscribe</span><span style="color:#A6ACCD;">(onChat)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>​ 对于不熟悉ts的读者，<code>e: ChatSendAfterEvent </code>正是一个类型标注，格式是 <code>name: Type</code> 此处用到了参数 <code>e</code> 的 <code>sender: Player</code> 属性，随后调用了 <code>kill()</code> 方法杀死名为 lampese 的玩家。</p><h3 id="动作" tabindex="-1">动作 <a class="header-anchor" href="#动作" aria-label="Permalink to &quot;动作&quot;">​</a></h3><p>​ 事件系统使我们得以监听 Minecraft世界的信息，但目前我们还不能影响世界，为了达到这个目的，我们需要 <code>World</code> 和 <code>Dimension</code> 类（不过你并不能构造它们，只能通过 Script API 提供的函数获取），<code>@minecraft/server</code> 包中包含了 <code>world</code> 对象，你可以通过它提供的方法来访问世界的一些属性，比如玩家 （<strong>getAllPlayers</strong>） ，维度（<strong>getDimension</strong>） 等。 下面是使用 <code>getAllPlayers</code> 方法的一些例子：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAllPlayers</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">kill</span><span style="color:#A6ACCD;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAllPlayers</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">CAIMEO</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">applyDamage</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">))</span></span></code></pre></div><p>当然 <code>World</code> 还有很多方法，涉及多种对实体、天气等的操作，具体可查阅文档：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendMessage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello Everyone</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stopMusic</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><p>​ <code>Dimension</code> 也是一个重要的对象，它同样也是无法构造的，只能通过 <code>getDimension</code> 方法获取。一般的，我们只需要获取主世界（overworld）。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> overWorld </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDimension</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">overworld</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>​ <code>Dimension</code> 提供了更多修改世界的方法（可以操作方块和实体等），在下面这个例子中，我们监听 <code>afterEvents</code> 的 <code>blockPlace</code> ，在放置方块的地方生成一只猪：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">BlockPlaceAfterEvent</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@minecraft/server</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> overWorld </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDimension</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">overworld</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onPlace</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BlockPlaceAfterEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">overWorld</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">spawnEntity</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">minecraft:pig</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">block</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">location</span><span style="color:#F07178;">) </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">afterEvents</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">blockPlace</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subscribe</span><span style="color:#A6ACCD;">(onPlace)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>​ 关于其他函数的使用方法可以查阅官方文档：</p><blockquote><p><a href="https://learn.microsoft.com/en-us/minecraft/creator/scriptapi/minecraft/server/minecraft-server" target="_blank" rel="noreferrer">https://learn.microsoft.com/en-us/minecraft/creator/scriptapi/minecraft/server/minecraft-server</a></p></blockquote>`,52),D=[y];function C(A,F,d,g,h,m){return a(),n("div",null,D)}const b=s(i,[["render",C]]);export{f as __pageData,b as default};
